// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace APP.Views.Shared
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\PROJETO_ENIWINE\FONTS\ClouseauApp\APP\APP\Views\Shared\_Layout.cshtml"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class _Layout : _LayoutBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html data-ng-app=\"app\">\r\n<head>\r\n\r\n    <meta charset=\"utf-8\">\r\n" +
                    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-t" +
                    "o-fit=no\">\r\n\r\n\r\n    <title>@ViewBag.Title - My ASP.NET Application</title>\r\n    " +
                    "<link href=\"~/Content/Site.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n    <link h" +
                    "ref=\"~/Content/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n    <link" +
                    " href=\"~/Content/doc.min.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n\r\n</head>\r\n" +
                    "<body>\r\n   \r\n    <nav class=\"navbar navbar-light bg-light\">\r\n        <a class=\"n" +
                    "avbar-brand\" href=\"#\">\r\n            <img src=\"~/Content/IMAGES/logotipo.jpg\"   h" +
                    "eight=\"30\" class=\"d-inline-block align-top\" alt=\"\">\r\n        </a>\r\n    </nav>\r\n\r" +
                    "\n    <div class=\"container body-content\">\r\n\r\n        <div class=\"container-fluid" +
                    "\">\r\n            <div class=\"row\" style=\"min-height:500px\">\r\n                <div" +
                    " class=\"col-md-5 col-lg-3 d-none d-sm-block detetive alert alert-warning\">\r\n    " +
                    "                <img class=\"shadow \" src=\"~/Content/IMAGES/detetive_particular.j" +
                    "pg\" />\r\n                    <fieldset>\r\n                        <legend>O Jogo</" +
                    "legend>\r\n                        <p>O empresário Sean Bean foi assassinado e o c" +
                    "orpo dele foi deixado na frente da delegacia de polícia. O Inspetor Jacques Clou" +
                    "seau foi escolhido para investigar este caso. Após uma série de investigações, e" +
                    "le organizou uma lista com prováveis assassinos, os locais do crime e quais arma" +
                    "s poderiam ter sido utilizadas.</p>\r\n                    </fieldset>\r\n          " +
                    "      </div>\r\n                <div class=\"col-sm-12 col-md-7 col-lg-9 viewport\">" +
                    "\r\n                    @RenderBody()\r\n                </div>\r\n            </div>\r" +
                    "\n        </div>\r\n\r\n        <hr />\r\n        <footer>\r\n            <p class=\"small" +
                    "\">&copy; @DateTime.Now.Year - Jean Puga</p>\r\n        </footer>\r\n    </div>\r\n\r\n  " +
                    "  <div id=\"myModal\" class=\"modal fade\">\r\n        <div class=\"modal-dialog\">\r\n   " +
                    "         <div class=\"modal-content\">\r\n                <div class=\"modal-header\">" +
                    "\r\n                    <h4 class=\"modal-title\">Caso Sean Bean</h4>\r\n             " +
                    "       <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"tru" +
                    "e\">&times;</button>\r\n\r\n                </div>\r\n                <div class=\"modal" +
                    "-body\">\r\n                    <img class=\"shadow \" src=\"~/Content/IMAGES/detetive" +
                    "_particular.jpg\" />\r\n                    <fieldset>\r\n                        <le" +
                    "gend>O Jogo</legend>\r\n                        <p>O empresário Sean Bean foi assa" +
                    "ssinado e o corpo dele foi deixado na frente da delegacia de polícia. O Inspetor" +
                    " Jacques Clouseau foi escolhido para investigar este caso. Após uma série de inv" +
                    "estigações, ele organizou uma lista com prováveis assassinos, os locais do crime" +
                    " e quais armas poderiam ter sido utilizadas.</p>\r\n                    </fieldset" +
                    ">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <" +
                    "script src=\"~/Scripts/jquery-3.0.0.min.js\"></script>\r\n\r\n    <script src=\"~/Scrip" +
                    "ts/bootstrap.min.js\"></script>\r\n\r\n\r\n    <script src=\"~/Scripts/angular.min.js\"><" +
                    "/script>\r\n    <script src=\"~/Scripts/angular-route.min.js\"></script>\r\n    <scrip" +
                    "t src=\"~/Scripts/angular-animate.min.js\"></script>\r\n\r\n    <!--APP-->\r\n\r\n    <scr" +
                    "ipt src=\"~/App_Front/models/Teory.js\"></script>\r\n    <script src=\"~/App_Front/mo" +
                    "dels/Game.js\"></script>\r\n\r\n    <script src=\"~/App_Front/app.module.js\"></script>" +
                    "\r\n    <script src=\"~/App_Front/_infra/config.js\"></script>\r\n    <script src=\"~/A" +
                    "pp_Front/controllers/game.controller.js\"></script>\r\n    <script src=\"~/App_Front" +
                    "/controllers/score.controller.js\"></script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <script type=\"text/" +
                    "javascript\">\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        var i" +
                    "sAndroid = ua.indexOf(\"android\") > -1;\r\n        var isIPhone = ua.indexOf(\"iphon" +
                    "e\") > -1;\r\n        if(isAndroid ||isIPhone) {\r\n            $(document).ready(fun" +
                    "ction(){\r\n                $(\"#myModal\").modal(\'show\');\r\n            });\r\n       " +
                    " }else{\r\n        }\r\n\r\n    </script>\r\n\r\n\r\n</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class _LayoutBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
